Any := (T: type) -> bool {
  return true
}

alloc := (ptr: &&Any`T) -> void {
  malloc: uint -> &char #cstdlib
  @ptr = malloc(T.bytes) :> &T
}


unique_ptr := struct {
  ptr: &int
}

Get := void -> unique_ptr {
  ptr: unique_ptr
  alloc(&ptr.ptr)
  return ptr
}

__destroy__ := (uptr: &unique_ptr) -> void {
  print "Calling global destructor\n"
  free uptr.ptr
}

__print__ := (uptr: unique_ptr) -> void {
  print @uptr.ptr
}

main := void -> void {
  p := Get()

  __destroy__ := (uptr: &unique_ptr) -> void {
    return
  }

  foo()

}
foo := void -> void {
  p := Get()
  q := Get()
}
