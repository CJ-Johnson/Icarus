show_data := (num_bytes: uint, alignment: uint) -> void {
  print "      bytes = ", num_bytes, "\n",
        "  alignment = ", alignment, "\n\n"
}
main := void -> void {
  print int, ":\n"
  show_data(int.bytes, int.alignment)

  print real, ":\n"
  show_data(real.bytes, real.alignment)

  print pair(real, bool), ":\n"
  show_data(pair(real, bool).bytes, pair(real, bool).alignment)

  print pair(bool, real), ":\n"
  show_data(pair(bool, real).bytes, pair(bool, real).alignment)

  print RBB, ":\n"
  show_data(RBB.bytes, RBB.alignment)

  print BRB, ":\n"
  show_data(BRB.bytes, BRB.alignment)

  print BBR, ":\n"
  show_data(BBR.bytes, BBR.alignment)

  print foo, ":\n"
  show_data(foo.bytes, foo.alignment)

  print &foo, ":\n"
  show_data((&foo).bytes, (&foo).alignment)

  print fooptr, ":\n"
  show_data(fooptr.bytes, fooptr.alignment)

  print color, ":\n"
  show_data(color.bytes, color.alignment)

  print string, ":\n"
  show_data(string.bytes, string.alignment)

  print [10; char], ":\n"
  show_data([10; char].bytes, [10; char].alignment)

  print [--; char], ":\n"
  show_data([--; char].bytes, [--; char].alignment)

//  print void, ":\n"
//  show_data(void.bytes, void.alignment)

  print type, ":\n"
  show_data(type.bytes, type.alignment)

  fooptr := &foo
}

pair := struct (K: type, V: type) {
  key: K
  val: V
}

BRB := triple(bool, real, bool)
BBR := triple(bool, bool, real)
RBB := triple(real, bool, bool)

triple := struct (A: type, B: type, C: type) {
  a: A
  b: B
  c: C
}

foo := struct {
  a: int
  b: char
  c: uint
}

color := enum {
  red
  orange
  yellow
  green
  blue
  indigo
  violet
}
