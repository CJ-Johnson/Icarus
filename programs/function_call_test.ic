main ::= void -> void {
  $void -> void {
    NoArgs()

    OneArg(3)
    OneArg(n = 3)

    OneArgWithDefault()
    OneArgWithDefault(3)
    OneArgWithDefault(n = 3)

    OneArgWithDefaultTypeDeduced()
    OneArgWithDefaultTypeDeduced(3)
    OneArgWithDefaultTypeDeduced(n = 3)

    MultipleArgs(3, 4)
    MultipleArgs(3, m = 4)
    MultipleArgs(n = 3, m = 4)
    MultipleArgs(m = 4, n = 3)

    MultipleArgsWithDefault()
    MultipleArgsWithDefault(3)
    MultipleArgsWithDefault(n = 3)
    MultipleArgsWithDefault(m = 3)
    MultipleArgsWithDefault(3, 4)
    MultipleArgsWithDefault(3, m = 4)
    MultipleArgsWithDefault(n = 3, m = 4)
    MultipleArgsWithDefault(m = 4, n = 3)

    OneConstArg(3)
    OneConstArg(n = 4)

    OneConstArgWithDefault()
    OneConstArgWithDefault(3)
    OneConstArgWithDefault(n = 3)

    OneConstArgWithDefaultTypeDeduced()
    OneConstArgWithDefaultTypeDeduced(3)
    OneConstArgWithDefaultTypeDeduced(n = 3)

    MultipleConstArgs(3, 4)
    MultipleConstArgs(3, m = 4)
    MultipleConstArgs(n = 3, m = 4)
    MultipleConstArgs(m = 4, n = 3)

    MultipleConstArgsWithDefault()
    MultipleConstArgsWithDefault(3)
    MultipleConstArgsWithDefault(n = 3)
    MultipleConstArgsWithDefault(m = 3)
    MultipleConstArgsWithDefault(3, 4)
    MultipleConstArgsWithDefault(3, m = 4)
    MultipleConstArgsWithDefault(n = 3, m = 4)
    MultipleConstArgsWithDefault(m = 4, n = 3)

    MixedArgs(3, 4)
    MixedArgs(3, m = 4)
    MixedArgs(n = 3, m = 4)
    MixedArgs(m = 4, n = 3)

    MixedArgs2(m = 3)
    MixedArgs2(3, 4)
    MixedArgs2(3, m = 4)
    MixedArgs2(n = 3, m = 4)
    MixedArgs2(m = 4, n = 3)

    MixedArgs3(3)
    MixedArgs3(n = 3)
    MixedArgs3(3, 4)
    MixedArgs3(3, m = 4)
    MixedArgs3(n = 3, m = 4)
    MixedArgs3(m = 4, n = 3)

    MixedArgs4()
    MixedArgs4(3)
    MixedArgs4(n = 3)
    MixedArgs4(m = 3)
    MixedArgs4(3, 4)
    MixedArgs4(3, m = 4)
    MixedArgs4(n = 3, m = 4)
    MixedArgs4(m = 4, n = 3)

    Overload(3)
    Overload(true)
    Overload(n = 3)
    Overload(b = true)

    OverloadWithDefault()
    OverloadWithDefault(3)
    OverloadWithDefault(true)
    OverloadWithDefault(n = 3)
    OverloadWithDefault(b = true)
  }()
}

NoArgs ::= void -> void { print "NoArgs\n" }
OneArg ::= (n: int) -> void { print "OneArg\n" }
OneArgWithDefault ::= (n: int = 1) -> void { print "OneArgWithDefault\n" }
OneArgWithDefaultTypeDeduced ::= (n := 2) -> void {
  print "OneArgWithDefaultTypeDeduced\n"
}
MultipleArgs ::= (n: int, m: int) -> void { print "MultipleArgs\n" }
MultipleArgsWithDefault ::= (n := 1, m := 2) -> void {
  print "MultipleArgsWithDefault\n"
}

OneConstArg ::= (n :: int) -> void {
  $print "OneConstArg[n = ", n, "]\n"
  print "OneConstArg[n = ", n, "]\n"
}
OneConstArgWithDefault ::= (n :: int = 1) -> void {
  $print "OneConstArgWithDefault[n = ", n, "]\n"
  print "OneConstArgWithDefault[n = ", n, "]\n"
}
OneConstArgWithDefaultTypeDeduced ::= (n ::= 2) -> void {
  $print "OneArgWithDefaultTypeDeduced[n = ", n, "]\n"
  print "OneArgWithDefaultTypeDeduced[n = ", n, "]\n"
}
MultipleConstArgs ::= (n :: int, m :: int) -> void {
  $print "MultipleConstArgs[n = ", n, ", m = ", m, "]\n"
  print "MultipleConstArgs[n = ", n, ", m = ", m, "]\n"
}
MultipleConstArgsWithDefault ::= (n ::= 1, m ::= 2) -> void {
  $print "MultipleConstArgsWithDefault[n = ", n, ", m = ", m, "]\n"
  print "MultipleConstArgsWithDefault[n = ", n, ", m = ", m, "]\n"
}

MixedArgs ::= (n: int, m :: int) -> void {
  $print "MixedArgs[m = ", m, "]\n"
  print "MixedArgs\n"
}

MixedArgs2 ::= (n := 3, m :: int) -> void {
  $print "MixedArgs2[m = ", m, "]\n"
  print "MixedArgs2\n"
}

MixedArgs3 ::= (n: int, m ::= 3) -> void {
  $print "MixedArgs3[m = ", m, "]\n"
  print "MixedArgs3\n"
}

MixedArgs4 ::= (n := 1, m ::= 2) -> void {
  $print "MixedArgs4[m = ", m, "]\n"
  print "MixedArgs4\n"
}

Overload ::= (n: int) -> void { print "Overload(int)\n" }
Overload ::= (b: bool) -> void { print "Overload(bool)\n" }

OverloadWithDefault ::= (n := 10) -> void { print "OverloadWithDefault(int)\n" }
OverloadWithDefault ::= (b: bool) -> void { print "OverloadWithDefault(bool)\n" }
