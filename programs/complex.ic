Complex := struct {
  a: real
  b: real
}

__print__ := (z: Complex) -> void {

  print z.a
  if (z.b >= 0.0) {
    print " + "
    print z.b
  } else {
    print " - "
    print -z.b
  }

  print "i"
}

__add__ := (z: Complex, w: Complex) -> Complex {
  ret := z
  ret.a += w.a
  ret.b += w.b
  return ret
}

__neg__ := (z: Complex) -> Complex {
  ret: Complex
  ret.a = -z.a
  ret.b = -z.b
  return ret
}

__sub__ := (z: Complex, w: Complex) -> Complex {
  ret := z
  ret.a -= w.a
  ret.b -= w.b
  return ret
}

__mul__ := (z: Complex, w: Complex) -> Complex {
  ret: Complex
  ret.a = z.a * w.a - z.b * w.b
  ret.b = z.a * w.b + z.b * w.a
  return ret
}

unit := (theta: real) -> Complex {
  sin: real -> real #cstdlib
  cos: real -> real #cstdlib

  ret: Complex
  ret.a = cos(theta)
  ret.b = sin(theta)
  return ret
}

conjugate := (z: Complex) -> Complex {
  zbar: Complex
  zbar.a = z.a
  zbar.b = -z.b
  return zbar
}

square_norm := (z: Complex) -> real {
  return z.a * z.a + z.b * z.b
}

main := void -> void {
  pi := 3.141592653
  z := unit(pi/4.0)
  w := unit(pi/8.0)

  print "    z = "
  print z
  print '\n'

  print "   -z = "
  print -z
  print '\n'

  print "    w = "
  print w
  print '\n'

  print "z + w = "
  print z + w
  print '\n'

  print "z - w = "
  print z - w
  print '\n'
  
  print "z * w = "
  print z * w
  print '\n'

  print "conjugate(z) = "
  print conjugate(z)
  print '\n'

  print "square_norm(z) = "
  print square_norm(z)
  print '\n'
}
