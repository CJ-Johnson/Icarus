
vec := struct {
  x: real
  y: real
  z: real
}

__add__ := (lhs: vec, rhs: vec) -> vec {
  ret: vec

  ret.x = lhs.x + rhs.x
  ret.y = lhs.y + rhs.y
  ret.z = lhs.z + rhs.z

  return ret
}

__sub__ := (lhs: vec, rhs: vec) -> vec {
  ret: vec

  ret.x = lhs.x - rhs.x
  ret.y = lhs.y - rhs.y
  ret.z = lhs.z - rhs.z

  return ret
}

__mul__ := (lhs: vec, rhs: vec) -> real {
  return lhs.x * rhs.x + lhs.y * rhs.y + lhs.z * rhs.z
}


main := void -> void {
  v1: vec
  v2: vec
  v3: vec
  v4: vec

  v3.x += 0.1

  print v1 == v2 == v3 == v4
  print '\n'
  print v1 != v2
  print '\n'
  v1.x = 3.0
  v1.y = 4.0
  v1.z = 12.0
  print "\nv1.x = "
  print v1.x
  v2 = -v1
  print "\nv1 = "
  print v1
  print "\nv2 = "
  print v2

  v2 = v1 + v3
  print "\nv2 = "
  print v2
  v2 = v1 - v3
  print "\nv2 = "
  print v2
  print "\n<v1, v2> = "
  print v1 * v2
  print "\n"


  __ne__ := (lhs: vec, rhs: vec) -> bool {
    print "TESTING NON-EQUALITY\n"
    return !(lhs == rhs)
  }

  __eq__ := (lhs: vec, rhs: vec) -> bool {
    print "TESTING EQUALITY\n"
    return lhs.x == rhs.x & lhs.y == rhs.y & lhs.z == rhs.z
  }

  __print__ := (v: vec) -> void {
    print "("
    print v.x
    print ", "
    print v.y
    print ", "
    print v.z
    print ")"
  }

  __neg__ := (v: vec) -> vec {
    ret := v
    ret.x = -v.x
    ret.y = -v.y
    ret.z = -v.z
    return ret
  }
}
