Any := (T: type) -> bool {
  return true
}

alloc := (ptr: &&Any`T) -> void {
  malloc: uint -> &char #cstdlib
  @ptr = malloc(T.bytes) :> &T
}


list := struct(T: type) {
  size: uint
  head: &node(T)
}


node := struct(T: type) {
  data: T
  next: &node(T)
}

__print__ := (l: list(int)) -> void {
  iter := l.head
  if l.size == 0u {
    return
  }
  print '['
    i := 0u
    while i < l.size {
      i += 1u
      print iter.data
      if i != l.size {
        print " -> "
      }
      iter = iter.next
    }
  
  print ']'
}

__print__ := (l: list(char)) -> void {
  iter := l.head
  if l.size == 0u {
    return
  }
  print '['
    i := 0u
    while i < l.size {
      i += 1u
      print iter.data
      if i != l.size {
        print " -> "
      }
      iter = iter.next
    }
  
  print ']'
}

__print__ := (l: list(list(char))) -> void {
  iter := l.head
  if l.size == 0u {
    return
  }
  print '['
    i := 0u
    while i < l.size {
      i += 1u
      print iter.data
      if i != l.size {
        print " -> "
      }
      iter = iter.next
    }
  
  print ']'
}



main := void -> void {
  l: list(int)
  add(&l, 3)
  add(&l, 5)
  add(&l, 7)

  print l
  print '\n'

  emptylist: list(int)

  print emptylist
  print '\n'

  l1: list(char)
  add(&l1, 'o')
  add(&l1, 'l')
  add(&l1, 'l')
  add(&l1, 'e')
  add(&l1, 'h')
  print l1
  print '\n'

  l2: list(char)
  add(&l2, 'd')
  add(&l2, 'l')
  add(&l2, 'r')
  add(&l2, 'o')
  add(&l2, 'w')
  print l2
  print '\n'

  LLC := list(list(char))
  ll: LLC
  add(&ll, l2)
  add(&ll, l1)
  print ll
  print '\n'
}

add := (l: &list(Any`T), n: T) -> void {
  nptr: &node(T)
  alloc(&nptr)
  nptr.data = n
  nptr.next = l.head
  l.head = nptr
  l.size += 1u
}

Any := (T: type) -> bool {
  return true
}
