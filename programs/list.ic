alloc := (ptr: &&Any`T) -> void {
  malloc: uint -> &char #cstdlib
  @ptr = malloc(T.bytes) :> &T
}


list := struct(T: type) {
  size: uint
  head: &node(T)
}


node := struct(T: type) {
  data: T
  next: &node(T)
}


__print__ := (l: list(int)) -> void {
  iter := l.head
  print '['
  if l.size > 0u {
    i := 0u
    while i < l.size {
      i += 1u
      print iter.data
      if i != l.size {
        print " -> "
      }
      iter = iter.next
    }
  } 
  print ']'
}
__print__ := (l: list(char)) -> void {
  iter := l.head
  print '['
  if l.size > 0u {
    i := 0u
    while i < l.size {
      i += 1u
      print iter.data
      if i != l.size {
        print " -> "
      }
      iter = iter.next
    }
  } 
  print ']'
}

__print__ := (l: list(list(char))) -> void {
  iter := l.head
  print '['
  if l.size > 0u {
    i := 0u
    while i < l.size {
      i += 1u
      print iter.data
      if i != l.size {
        print " -> "
      }
      iter = iter.next
    }
  } 
  print ']'
}



main := void -> void {
  l: list(int)
  l.add(3).add(5).add(7)
  print l, '\n'

  emptylist: list(int)
  print emptylist, '\n'

  l1: list(char)
  l1.add('o').add('l').add('l').add('e').add('h')
  print l1, '\n'

  l2: list(char)
  l2.add('d').add('l').add('r').add('o').add('w')
  print l2, '\n'

  LLC := list(list(char))
  ll: LLC
  ll.add(l2).add(l1)
  print ll, '\n'
}

add := (this: &list(Any`T), n: T) -> &list(T) {
  nptr: &node(T)
  alloc(&nptr)
  nptr.data = n
  nptr.next = this.head
  this.head = nptr
  this.size += 1u
  return this
}

Any := (T: type) -> bool { return true }
