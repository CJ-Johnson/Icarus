require "lib/prelude.ic"

Duration := struct {
  _val: int // In nanoseconds
}

nanoseconds := (n: int) -> Duration {
  result: Duration = --
  result._val = n
  return result
}

microseconds := (n: int) -> Duration {
  result: Duration = --
  result._val = n * 1_000
  return result
}

milliseconds := (n: int) -> Duration {
  result: Duration = --
  result._val = n * 1_000_000
  return result
}

seconds := (n: int) -> Duration {
  result: Duration = --
  result._val = n * 1_000_000_000
  return result
}

timespec := struct {
  tv_sec: int
  tv_ns: int
}

nanosleep: (&timespec, &timespec) -> int #cstdlib
SleepFor := (d: Duration) -> void {
  request: timespec = --
  remainder: timespec = --
  remainder.tv_sec = d._val / 1_000_000_000
  remainder.tv_ns  = d._val % 1_000_000_000

  result := -1
  while result != 0 {
   request = remainder
   result = nanosleep(&request, &remainder)
  }
}
clock: void -> uint #cstdlib
Now := void -> int {
  return clock()'int
}
