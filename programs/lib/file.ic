opaque := struct {}

File     := struct { _handle: &opaque }
FileMode := enum { Read \\ Write }

fopen: (string, string) -> &opaque #cstdlib
fgetc: &opaque -> uint #cstdlib
ungetc: (uint, &opaque) -> void #cstdlib

open := (name: string, m: FileMode) -> &opaque {
  return fopen(name, case {
    m == FileMode.Read  => "r"
    else                => "w"
  })
}

Next := (this: &File) -> char {
  EOF := 0xffffffff'uint #const

  n := fgetc(this._handle)

  return ascii(case {
    n == EOF  =>  0'uint
    else      =>  n
  })
}

Peek := (this: &File) -> char {
  EOF := 0xffffffff'uint #const

  n := fgetc(this._handle)
  ungetc(n, this._handle)

  return ascii(case {
    n == EOF  =>  0'uint
    else      =>  n
  })
}
