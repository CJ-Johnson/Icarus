c_str := struct {
  ptr: &char
}

__print__ := (p: c_str) -> void {
  i := 0u
  raw := p.ptr :> &[0u; char]
  while (@raw)[i] != ascii(0u) {
    print (@raw)[i]
    i += 1u
  }
}

to_cstr := (s: &string) -> c_str {
  malloc: uint -> &[0u; char] #cstdlib

  raw_str := malloc(s._length + 1u)
  (@raw_str)[s._length] = ascii(0u)

  for i in 0u .. s._length { (@raw_str)[i] = s._chars[i] }

  result: c_str
  result.ptr = raw_str :> &char
  return result
}

__destroy__ := (p: &c_str) -> void { free p.ptr }
