require "lib/prelude.ic"
require "lib/file.ic"

NodeType := enum {
  Identifier
  Number
  Unop
  type::Unknown
}

main := void -> void { 
  f: File
  f._handle = open("programs/cheating_quine.ic", FileMode.Read)

  c := Peek(&f)
  while c != 0'uint'ascii {
    print case {
      c'IsAlphaOrUnderscore  =>  IdentifierFn(&f)
      c == `0                =>  ZeroInitiatedNumber(&f)
      else                   =>  NodeType.type::Unknown
    }, `\n
    c = (&f)'Next
  }
}

IdentifierFn := (f: &File) -> NodeType {
  c := f'Next
  while c'IsAlphaNumericOrUnderscore { c = f'Next }
  return NodeType.Identifier
}


ZeroInitiatedNumber := (f: &File) -> NodeType {
  f'Next  // zero
  c := f'Next
  return case {
    c == `b    =>  f'BinaryNumber
    c == `c    =>  f'OctalNumber
    c == `d    =>  f'DecimalNumber
    c == `x    =>  f'HexadecimalNumber
    c'IsDigit  =>  f'DecimalNumber
    else       =>  NodeType.type::Unknown
  }
}

BinaryNumber := OctalNumber
DecimalNumber := OctalNumber
HexadecimalNumber := OctalNumber
OctalNumber := (f: &File) -> NodeType {
  return NodeType.Number
}

IsAlphaOrUnderscore := (c: char) -> bool {
  return c'IsLower | c'IsUpper | c == `_
}

IsAlphaNumericOrUnderscore := (c: char) -> bool {
  return c'IsAlphaOrUnderscore | c'IsDigit
} 

IsLower := (c: char) -> bool { return ord(`a) <= ord(c) <= ord(`z) }
IsUpper := (c: char) -> bool { return ord(`A) <= ord(c) <= ord(`Z) }
IsDigit := (c: char) -> bool { return ord(`0) <= ord(c) <= ord(`9) }
