Fib := struct {
  _a := 0
  _b := 1

  _orig_a := 0
  _orig_b := 1
}

FibSeed := (a: int, b: int) -> Fib {
  result: Fib // = --
  result._a = a
  result._b = b
  result._orig_a = a
  result._orig_b = b
}

next := (f: &Fib) -> uint {
  result := f._a
  old_fb := f._b
  f._b += f._a
  f._a = old_fb

  return result
}

reset := (f: &Fib) -> void {
  f._a = f._orig_a
  f._b = f._orig_b
}

main := void -> void {
  fib := FibSeed(0, 1)
  luc := FibSeed(2, 1)  // TODO this is failing because we're not initing in the
                        // right order. Doing it by hand for now.
  luc._a      = 2
  luc._b      = 1
  luc._orig_a = 2
  luc._orig_b = 1

  show := (name: string, num: uint, generator: Fib) -> void {
    for i in 0u .. num - 1u { print name, "(", i, ")\t= ", generator.next(), "\n" }
  }

  show("fib", 10u, fib)
  print "\n"
  show("luc", 10u, luc)
  print "\n"

  luc.reset()

  show("fib", 10u, fib)
  print "\n"
  show("luc", 10u, luc)
  print "\n"
}
