ERROR_MACRO(InvalidRequirement, "Require statements must take a string literal "
                                "as the name of the file to be imported.",
            "", 1)

ERROR_MACRO(CallingDeclaration,
            "Invalid declaration. You cannot call a declaration.", "", 1)

ERROR_MACRO(NonDeclInStructDecl,
            "Each struct member must be defined using a declaration.", "", 1)

ERROR_MACRO(RepeatedEnumName, "Repeated enum member.", "", 1)

ERROR_MACRO(InvalidCharQuestionMark, "The character '?' is not used in Icarus. "
                                     "I am going to ignore it and continue "
                                     "processing.",
            "", 1)

ERROR_MACRO(InvalidCharTilde, "The character '~' is not used in Icarus. I am "
                              "going to ignore it and continue processing.",
            "", 1)

ERROR_MACRO(TabInCharLit, "I found a tab '\t' in your character-literal. You "
                          "need to use '\\t' instead.",
            "", 1)

ERROR_MACRO(MissingComma,
            "There are two consecutive expressions. Are you missing a comma?",
            "", 1)

ERROR_MACRO(EmptyArrayLit, "Cannot infer the type of an empty array literal.",
            "", 2)

ERROR_MACRO(NotInMultilineComment, "I found a token representing the end of a "
                                   "multi-line comment (*/), but it was not "
                                   "part of a comment block.",
            "", 2)

ERROR_MACRO(
    RunawayCharLit,
    "You are missing a quotation mark at the end of your character-literal.",
    "", 1)

ERROR_MACRO(RunawayStringLit, "You are missing a quotation mark at the end of "
                              "your string-literal. I think it goes here:",
            "", 1)

ERROR_MACRO(EscapedSingleQuoteInStringLit, "The single quotation mark "
                                           "character (') does not need to be "
                                           "esacped in a string-literal.",
            "", 2)

ERROR_MACRO(EscapedDoubleQuoteInCharLit, "The double quotation mark character "
                                         "(\") does not need to be esacped in "
                                         "a character-literal.",
            "", 2)

ERROR_MACRO(InvalidEscapeCharInStringLit,
            "I encounterd an invalid escape sequence in your string-literal.",
            "The valid escape sequences in a string-literal are \\\\, \\\", "
            "\\a, \\b, \\f, \\n, \\r, \\t, and \\v.",
            2)

ERROR_MACRO(
    InvalidEscapeCharInCharLit,
    "I encounterd an invalid escape sequence in your character-literal.",
    "The valid escape sequences in a character-literal are \\\\, \\\', \\a, "
    "\\b, \\f, \\n, \\r, \\t, and \\v.",
    2)

ERROR_MACRO(GlobalArrayUnsupported, "We do not yet support global arrays.", "",
            1)

ERROR_MACRO(GlobalPointerUnsupported, "We do not yet support global pointers.",
            "", 1)

ERROR_MACRO(EnumNeedsIds, "Enum members must be identifiers.", "", 1)

ERROR_MACRO(NonKVInCase,
            "Each line in case statement must be a key-value pair.", "", 1)

ERROR_MACRO(NonInDeclInForLoop, "Expect 'in' declaration in for-loop.", "", 1)

ERROR_MACRO(InvalidDecl, "Invalid use of declaration.", "", 1)

ERROR_MACRO(LHSDecl, "Left-hand side cannot be a declaration", "", 1)
ERROR_MACRO(RHSNonIdInAccess, "Right-hand side must be an identifier", "", 1)
ERROR_MACRO(
    RHSNonTickDecl,
    "Right-hand side cannot be a declaration other than one declared with '`'",
    "", 1)

ERROR_MACRO(NonIdJumpOperand,
            "Operand to a jump instruction must be an identifier.", "", 1)
ERROR_MACRO(NotCallable, "Object not callable.", "", 1)

ERROR_MACRO(InvalidArrayAssignmentDifferentTypes,
            "Invalid assignment. Data in arrays are of different types.", "", 1)

ERROR_MACRO(InvalidArrayAssignmentDifferentLengths,
            "Invalid assignment. Arrays are of different lengths.", "", 1)
ERROR_MACRO(NonComposableFunctions, "Functions cannot be composed.", "", 1)
ERROR_MACRO(NonTypeFunctionInput, "From-type for a function must be a type.",
            "", 1)
ERROR_MACRO(NonTypeFunctionOutput, "To-type for a function must be a type.", "",
            1)

ERROR_MACRO(NonFunctionTest,
            "Cannot generate a type where the tester is not a function", "", 1)
ERROR_MACRO(NonBoolTestReturn, "Test function must return a bool", "", 1)
ERROR_MACRO(NonTypeTestInput, "Test function must take a type", "", 1)
ERROR_MACRO(TypeIteration, "Cannot iterate over a type", "", 1)
ERROR_MACRO(IndeterminantType, "Cannot determine type from in declaration.", "",
            1)
ERROR_MACRO(VoidDeclaration, "Identifier being declared as having void type.",
            "", 1)
ERROR_MACRO(ParametricDeclaration,
            "Identifier being declared as having a parametric type.", "", 1)
ERROR_MACRO(NonFunctionPrint, "Print must be defined to be a function.", "", 1)
ERROR_MACRO(NonVoidPrintReturn, "Print function must return void", "", 1)
ERROR_MACRO(NonFunctionAssign, "Assign must be defined to be a function", "", 1)
ERROR_MACRO(NonVoidAssignReturn, "Assign function must return void", "", 1)
ERROR_MACRO(NoValidMatches, "No valid matches.", "", 1)
ERROR_MACRO(AmbiguousCall, "Ambiguous call.", "", 1)
ERROR_MACRO(XorEqNeedsBool, "Operator '^=' must take arguments of type bool.",
            "", 1)
ERROR_MACRO(AndEqNeedsBool, "Operator '&=' must take arguments of type bool.",
            "", 1)
ERROR_MACRO(OrEqNeedsBool, "Operator '|=' must take arguments of type bool.",
            "", 1)
ERROR_MACRO(ArrayIndexType, "Array length indexed by non-integral type", "", 1)
ERROR_MACRO(InconsistentArrayType,
            "Type error: Array literal must have consistent type", "", 1)
ERROR_MACRO(JumpOutsideLoop, "statement must be contained inside a loop.", "",
            1)
