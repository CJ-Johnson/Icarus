// TODO:
// null -> pointer conversions
// [] -> array conversions
// Arrays of length zero as sub-arrays are a WAT because they take up zero space
// and after printing the first one, we check if we're at the end by matching
// pointers. Even if there are 100 elements, the size is zero and lo and behold
// we're at the end! So we only print one empty array. :(

bool_long ::= () -> bool { return true }
bool_short ::= () => true

char_long ::= () -> char { return `x }
char_short ::= () => `x

int_long ::= () -> int { return 3 }
int_short ::= () => 3

real_long ::= () -> real { return 3.5 }
real_short ::= () => 3.5

real_ptr_long ::= () -> *real {
  r: real
  return &r
}

array_long0 ::= () -> [0; int] {
  a: [0; int]
  return a
}

array_long3 ::= () -> [3; int] { return [1, 2, 3] }
array_short3 ::= () => [1, 2, 3]

multi_dim_array_long ::= () -> [2, 3; int] { return [[1, 2, 3], [4, 5, 6]] }
multi_dim_array_short ::= () => [[1], [2], [3]]

S ::= struct { n: int \\ b: bool }
struct_long ::= () -> S {
  s: S
  return s
}

struct_ptr ::= () -> *S {
  s: S
  return &s
}

struct_array ::= () -> [4; S] {
  a: [4; S]
  return a
}

mult_ret_long ::= () -> (int, bool) {
  return 3, true
}
mult_ret_short ::= () => (3, true)

mult_ret_struct ::= () -> (S, bool) {
  s: S
  return s, true
}

mult_ret_struct_ptr_array ::= () -> (*S, [3, 2; S]) {
  a: [3, 2; S]
  s: S
  return &s, a
}

main ::= () -> () {
  print bool_long(), "\n"
  print bool_short(), "\n"

  print char_long(), "\n"
  print char_short(), "\n"

  print int_long(), "\n"
  print int_short(), "\n"

  print real_long(), "\n"
  print real_short(), "\n"

  print real_ptr_long(), "\n"

  print array_long0(), "\n"
  print array_long3(), "\n"
  print array_short3(), "\n"

  print multi_dim_array_long(), "\n"
  print multi_dim_array_short(), "\n"

  print struct_long(), "\n"
  print struct_ptr(), "\n"
  print struct_array(), "\n"

  n: int
  b: bool
  (n, b) = mult_ret_long()
  print n, b, "\n"
  (n, b) = mult_ret_short()
  print n, b, "\n"

  s: *S
  a: [3, 2; S]
  (s, a) = mult_ret_struct_ptr_array()
  print s, a, "\n"
}
